package application;
import metiers.GpUtilisateur;
import metiers.Utilisateur;
import outils.Outils;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;

import java.io.IOException;
import java.net.URL;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ResourceBundle;

import com.jfoenix.controls.JFXButton;

import DataBase.DAOfactory;
import DataBase.GpUtilisateurDAO;
import DataBase.UtilisateurDAO;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.ComboBox;
import javafx.scene.control.PasswordField;
import javafx.scene.layout.BorderPane;
import javafx.stage.Stage;
import metiers.Utilisateur;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TableColumn;

public class UtilisateursController implements Initializable{
	public static ObservableList<Utilisateur>ListeUtilisateur=FXCollections.observableArrayList();
	public static ObservableList<GpUtilisateur>ListeGU=FXCollections.observableArrayList();
	private Utilisateur utilisateurCourant=null;
	private GpUtilisateur GpCourent=null;
	@FXML
	private BorderPane root;
	/*table groupe utilisateur*/
	@FXML
	private TableView<GpUtilisateur> TableGUtilisateur;
	@FXML
	private TableColumn <GpUtilisateur,Long>col_idGUt;
	@FXML
	private TableColumn<GpUtilisateur,String> col_nomGU;
	@FXML
	private TableColumn<GpUtilisateur,String>  col_DescGU;
	
	
	
	@FXML
    private Button btnAnnulerGU;

    @FXML
    private Button btnAnnulerUser;



    @FXML
    private Button btnValider;

    @FXML
    private Button btnValiderUser;

    @FXML
    private PasswordField confMdp;

    @FXML
    private TextArea description;

    @FXML
    private TextField mailUser;

    @FXML
    private PasswordField mdpUser;

    @FXML
    private TextField nomGUser;

    @FXML
    private TextField nomUser;
    
    @FXML
	private ComboBox<GpUtilisateur> comboGU;

  

    
	
	
	@FXML
	private JFXButton btnNgroup;
	@FXML
	private JFXButton btnmodifG;
	@FXML
	private JFXButton supGrou;
	@FXML
	private ComboBox titre;
	@FXML
	private TextField recherfield;
	@FXML
	private Button ResercheGroupe;
	@FXML
	private JFXButton btnNewUtil;
	@FXML
	private JFXButton btnModifUt;
	@FXML
	private JFXButton SupUtilis;
	
	@FXML
	private TableView<Utilisateur> TableUtilisateur ;
	
	public TableView<Utilisateur> getTableUtilisateur() {
		return TableUtilisateur;
	}
	public void setTableUtilisateur(TableView<Utilisateur> tableUtilisateur) {
		TableUtilisateur = tableUtilisateur;
	}
	/*table utilisateur*/
	@FXML
	private TableColumn<Utilisateur,Long> col_idUt;
	@FXML
	private TableColumn<Utilisateur,String> col_nomUt;
	@FXML
	private TableColumn<Utilisateur,String>  col_MailUt;
	@FXML
	private TableColumn<Utilisateur,String>  col_MotPass;
	@FXML
	private TableColumn<Utilisateur,String>  col_GUt;
	@FXML
	private TableColumn<Utilisateur,String> col_Statut;
	@FXML
	private TableColumn<Utilisateur,String> col_DateCreer;
	@FXML
	private ComboBox titreUtil;
	@FXML
	private TextField rechercheUtil;
	@FXML
	private JFXButton btnRechercheUtil;
	
	UtilisateurDAO userDAO=new UtilisateurDAO();
	GpUtilisateurDAO GuDAO=new GpUtilisateurDAO();
	Outils outils=new Outils();

	// Event Listener on JFXButton[#btnNgroup].onAction
	@FXML
	public void opengroupe(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on JFXButton[#btnmodifG].onAction
	@FXML
	public void ModifGrou(ActionEvent event) {
		GpUtilisateur gp=TableGUtilisateur.getSelectionModel().getSelectedItem();
		if(gp!=null) {
			GpCourent=gp;
			nomGUser.setText(GpCourent.getRole());
			description.setText(GpCourent.getDescription());
		}
	}
	// Event Listener on JFXButton[#supGrou].onAction
	@FXML
	public void supgroup(ActionEvent event) {
		GpUtilisateur gp=TableGUtilisateur.getSelectionModel().getSelectedItem();
		if(gp!=null) {
			if(Outils.confirmer("Voullez supprimer ce groupe utilisateur? ")) {
				GuDAO.delete(gp);
				ListeGU.remove(gp);
				Outils.info("Groupe utilisateur supprimer avec succès");
			}
		}
	}
	// Event Listener on Button[#ResercheGroupe].onAction
	@FXML
	public void groupeU(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on JFXButton[#btnNewUtil].onAction
	@FXML
	public void openUtilisateur(ActionEvent event) {
		Parent parent;
		try {
			parent = FXMLLoader.load(getClass().getResource("Compte.fxml"));
			Scene scene= new Scene(parent);
			Stage stage=new Stage();
			stage.setScene(scene);
			stage.setTitle("Gestion des utilisateurs");
			stage.setResizable(false);
			stage.show();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		
	}
	// Event Listener on JFXButton[#btnModifUt].onAction
	@FXML
	public void modifUtilisateur(ActionEvent event) {
		//Parent parent;
		Utilisateur user=TableUtilisateur.getSelectionModel().getSelectedItem();
		if(user!=null) {
			utilisateurCourant=user;
			nomUser.setText(user.getNomUt());
			mailUser.setText(user.getMail());
			comboGU.getSelectionModel().select(GuDAO.find(user.getIdgroupeUt()));
			
		}	
			
		}

	// Event Listener on JFXButton[#SupUtilis].onAction
	@FXML
	public void SupUtilisateur(ActionEvent event) {
		
		Utilisateur user=TableUtilisateur.getSelectionModel().getSelectedItem();
		if(user!=null) {
			if(Outils.confirmer("Voullez vraiment suprimer cet utilisateur?")) {
				UtilisateurDAO userDAO=new UtilisateurDAO();
				userDAO.delete(user);
				ListeUtilisateur.remove(user);
			}
		}
		
	}
	// Event Listener on JFXButton[#btnRechercheUtil].onAction
	@FXML
	public void RechercheUtil(ActionEvent event) {
		// TODO Autogenerated
	}
	
	
	  @FXML
	    void AnnulerGU(ActionEvent event) {
		  nomGUser.setText(null);
	      description.setText(null);

	    }

	    @FXML
	    void AnnulerUser(ActionEvent event) {
	    	

	    }

	    @FXML
	    void ValiderGU(ActionEvent event) {
	    	if(!nomGUser.getText().equals(null)) {
	    		if(GpCourent==null) {
	    			GpUtilisateur gu= new GpUtilisateur(null, nomGUser.getText(), description.getText());
	    			if(GuDAO.create(gu)!=null) {
	    				ListeGU.add(gu);
	    				Outils.info("Groupe utilisateur ajouté avec succès");
	    				nomGUser.setText(null);
	    		    	description.setText(null);
	    			}
	    			
	    		}else {
	    			GpCourent.setRole(nomGUser.getText());
	    			GpCourent.setDescription(description.getText());
	    			if(GuDAO.create(GpCourent)!=null) {
	    				ListeGU.set(TableGUtilisateur.getSelectionModel().getSelectedIndex(), GpCourent);
	    				Outils.info("Groupe utilisateur moditié avec succès");
	    				nomGUser.setText(null);
	    		    	description.setText(null);
	    			}
	    		}
	    	}else {
	    		Outils.erreur("Des champs réquis n'ont pas été saisis");
	    	}

	    }

	    @FXML
	    void ValiderUser(ActionEvent event) {
	    	LocalDate currentDate = LocalDate.now();
	    	if(!(mailUser.getText().equals(null)&& nomUser.getText().equals(null) && mdpUser.equals(null)&& confMdp.equals(null))) {				
				if(utilisateurCourant!=null) {
			
					if(!mdpUser.getText().equals(confMdp.getText()) ) {
						Outils.erreur("Les mots de passe que vous avez saisie ne sont pas conforment");
					}else {
						if(Outils.confirmer("Voullez vous vraiment modifier cet utilisateur?")) {
							utilisateurCourant.setMail(nomUser.getText());
							utilisateurCourant.setNomUt(mailUser.getText());
							utilisateurCourant.setMotdepasse(outils.sha256(mdpUser.getText()) );
							utilisateurCourant.setIdgroupeUt(comboGU.getSelectionModel().getSelectedItem().getId());
							Utilisateur user =userDAO.update(utilisateurCourant);
							int i =ListeUtilisateur.indexOf(utilisateurCourant);
							ListeUtilisateur.set(i,user);
							utilisateurCourant=null;
						}
						
					}
					
				}else {
					if(!mdpUser.getText().equals(confMdp.getText()) ) {
						Outils.erreur("Les mots de passe que vous avez saisie ne sont pas conforment");
					}else {
						Utilisateur user= userDAO.create(new Utilisateur(null, mailUser.getText(),
								nomUser.getText(), outils.sha256(mdpUser.getText())));
						GpUtilisateur gu=comboGU.getSelectionModel().getSelectedItem();
						if(gu!=null) {
							user.setIdgroupeUt(gu.getId());
							user.setDteCreation(Outils.DateEnChaine(currentDate));
							ListeUtilisateur.add(user);
							Outils.info("Utilisateur ajouté avec succès");
							mailUser.setText(null);
							nomUser.setText(null);
							mdpUser.setText(null);
							confMdp.setText(null);
							comboGU.getSelectionModel().select(null);
							
					}else {
						Outils.erreur("Le choix de groupe utilisateur est obligatoire");
					}
				}
	    	}
	    }else {
    		Outils.erreur("Des champs réquis n'ont pas été saisis");
    	}
	  }
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		/*initialisateion du tableau utilisateur*/
		col_idUt.setCellValueFactory(new PropertyValueFactory<>("id"));
		col_nomUt.setCellValueFactory(new PropertyValueFactory<>("nomUt"));
		col_MailUt.setCellValueFactory(new PropertyValueFactory<>("mail"));
		col_MotPass.setCellValueFactory(new PropertyValueFactory<>("motdepasse"));
		col_GUt.setCellValueFactory(new PropertyValueFactory<>("groupeUt"));
		col_Statut.setCellValueFactory(new PropertyValueFactory<>("statut"));
		col_DateCreer.setCellValueFactory(new PropertyValueFactory<>("dteCreation"));
		UtilisateurDAO UserDAO=new UtilisateurDAO();
		if(UserDAO.findAll()!=null) {
			ResultSet RS=UserDAO.findAll();
			try {
				while(RS.next()) {
					long i=RS.getLong(1);
					ListeUtilisateur.add(UserDAO.find(i));
					//System.out.println(UserDAO.find(i).getGroupeUt());
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		TableUtilisateur.setItems(ListeUtilisateur);
		
		/*initilisation du tableau groupe utilisateur*/
		col_idGUt.setCellValueFactory(new PropertyValueFactory<>("id"));
		col_nomGU.setCellValueFactory(new PropertyValueFactory<>("role"));
		col_DescGU.setCellValueFactory(new PropertyValueFactory<>("description"));
		DAOfactory DAOfac= new DAOfactory();
		if(DAOfac.getGpUtilisateurDAO().findAll()!=null) {
			ResultSet RS=DAOfac.getGpUtilisateurDAO().findAll();
			try {
				while(RS.next()) {
					long i=RS.getLong(1);
					ListeGU.add(DAOfac.getGpUtilisateurDAO().find(i));
					System.out.println(DAOfac.getGpUtilisateurDAO().find(i));
					comboGU.setItems(ListeGU);
				}
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			TableGUtilisateur.setItems(ListeGU);
		}
		
		
		
		
	}
}
