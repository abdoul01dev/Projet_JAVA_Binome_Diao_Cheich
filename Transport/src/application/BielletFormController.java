package application;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;
import javafx.scene.control.Alert.AlertType;
import metiers.Billet;
import metiers.Depart;
import metiers.Destination;

import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ResourceBundle;

import DataBase.DAOfactory;
import DataBase.DestinationDAO;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.control.ComboBox;
import javafx.scene.control.DatePicker;

public class BielletFormController extends BaseController implements Initializable{
	//variable indicateur de la manière dont la fenetre sera ouverte ie en mode passager ou en mode reservation
	public static int indiacteur;
	//la fonction charger changer la visiblité des champ
	
	//liste de choix pour le combo destination
	ObservableList<Destination> destination= FXCollections.observableArrayList();
	//liste de choix pour le combo depart
	ObservableList<Depart> depart= FXCollections.observableArrayList();
	//liste de choix pour le combo type de billet
	ObservableList<String> type= FXCollections.observableArrayList();
	@FXML
	private DatePicker dateV;
	@FXML
	private Label labID;
	@FXML
	private TextField champNom;
	@FXML
	private TextField champPrenom;
	@FXML
	private TextField champTel;
	@FXML
	private ComboBox<Destination> CombDest;
	@FXML
	private ComboBox<Billet> CombType;
	@FXML
	private ComboBox <Depart>CombDep;
	@FXML
	private Label labMontant;
	@FXML
	private Button btnAnnuler;
	@FXML
	private Button btnVF;
	@FXML
	private Button btnValider;

	// Event Listener on ComboBox[#CombDest].onAction
	@FXML
	public void ActCombDest(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on ComboBox[#CombType].onAction
	@FXML
	public void ActCopType(ActionEvent event) {
		Billet billet= CombType.getSelectionModel().getSelectedItem();
	    if(billet!=null) {
	    	labMontant.setText(billet.getPrix());
	    }else {
	    	labMontant.setText("");
	    }
	}
	// Event Listener on ComboBox[#CombDep].onAction
	@FXML
	public void ActComboDep(ActionEvent event) {
		
	}
	// Event Listener on Button[#btnAnnuler].onAction
	@FXML
	public void annuler(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnVF].onAction
	@FXML
	public void valFerm(ActionEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button[#btnValider].onAction
	@FXML
	public void Valider(ActionEvent event) {
		// TODO Autogenerated
	}
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		//gestion de la visibilité du champ date
		if(indiacteur==0)
			dateV.setVisible(false);
		else
			dateV.setVisible(true);
		
		
		DAOfactory DAOF=new DAOfactory();
		DestinationDAO destinationDAO= DAOF.getDestinationDAO();
		
		ResultSet Rs= destinationDAO.findAll();
		try {
			while(Rs.next()) {
				Long id=Rs.getLong("ID_Destination");
				Destination dest=destinationDAO.find(id);
				System.out.println(dest.getLesBillet().isEmpty());
				destination.add(dest);
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		CombDest.setItems(destination);
		CombDest.getSelectionModel().selectFirst();
		
		//remplir le combo depart au clic sur celui-ci en fonction de la destination choisie
		CombDep.setOnMouseClicked(event->{
			 Destination selectedDestination = CombDest.getSelectionModel().getSelectedItem();

			    if (selectedDestination != null) {
			        ObservableList<Depart> departList = selectedDestination.getLesDaparts();

			        if (departList != null) {
			            CombDep.setItems(departList);
			            
			        } else {
			        	System.out.println("Ko");
			        }
			    }
		});
		
		
		//remplir le combo billet au clic sur celui-ci en fonction de la destination choisie
		 CombType.setOnMouseClicked(event->{
			 Destination selectedDestination = CombDest.getSelectionModel().getSelectedItem();

			    if (selectedDestination != null) {
			        ObservableList<Billet> billetList = selectedDestination.getLesBillet();

			        if (billetList!= null) {
			            CombType.setItems(billetList);
			            //CombType.getSelectionModel().selectFirst();
			        } else {
			        	CombDep.setItems(null);
			        	Alert alert = new Alert(AlertType.WARNING);
			            alert.setTitle("Alert");
			            alert.setHeaderText("\"Veuillez sélectionner le départ d'abord\"");
			            alert.setContentText("Veuillez sélectionner le départ d'abord");
			            alert.showAndWait();
			        }
			    }
			    
			    
		});
		
		
		
		
	}
}
